"""
Date: 20.12.2022
Author: Kaufmann Stefan

verschiedene 2R Robotermodelle  
"""
# %%
#from Kinematik_2R import *
import sympy as sym
from numpy import sin,cos
import numpy as np
from Parameter import *

    
def model_nlin(t,x,controller):

    """ Extendend Nonlinear System Model
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3]
        t:             time as int
        controller:    u_soll... Solltrajektorie  [x_soll, y_soll, xd_soll,yd_soll, xdd_soll, ydd_soll]  vector n = 6
                       ctr ... name of the controller
                       k0 .... Gain matrix 2*2
                       k1 .... Gain matrix verlocity  2*2


        Returns
        --------
        dx:       chance of the state as a vektor [qd1,qd2,qd3,qdd1,qdd2,qdd3]     
                
    """
    
    dx =[0,0,0, 0,0,0, 0,0,0, 0]  
  
    q1,q2,q3,qd1,qd2,qd3  = x[0],x[1],x[2],x[3],x[4],x[5]


    if controller.ctr == 'multivariable':
        u = ctr_multi_ext(t,x,controller,dx)                
    else:
        u = controller.u        
        
    u1,u2,u3 = u[0], u[1], u[2]  
    fx = controller.fx  
    x[9] = fx
    

    dx[0] = qd1
    dx[1] = qd2
    dx[2] = qd3
    # Modell ohne Kraftterm
    #dx[3] = ((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)*(-g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))*(-g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))
    #dx[4] = (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))*(-g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I3 + J3*r3**2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)*(-g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))
    #dx[5] = ((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2)*(-g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))

    # Modell mit Kraftterm
    dx[3] = ((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)*(-fx*(-l1*sin(q1) - l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))*(-fx*(-l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(fx*l_s3*sin(q1 + q2 + q3) - g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))
    dx[4] = (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))*(-fx*(-l1*sin(q1) - l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I3 + J3*r3**2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)*(-fx*(-l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(fx*l_s3*sin(q1 + q2 + q3) - g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))
    dx[5] = ((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-fx*(-l1*sin(q1) - l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s1*m1*cos(q1) + m2*(l1*cos(q1) + l_s2*cos(q1 + q2)) + m3*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))*(qd1 + qd2 + qd3) - qd1*(B1*r1**2 - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3)) + kb1*km1/R1) - qd2*(-1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l1*qd2*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l_s3*m3*qd3*(l1*sin(q2 + q3) + l2*sin(q3))) + u1)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))*(-fx*(-l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3)) - g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) + 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) - qd1*(1.0*l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - 1.0*l2*l_s3*m3*qd3*sin(q3)) - qd2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3) + kb2*km2/R2) + u2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)) + ((I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2)*(fx*l_s3*sin(q1 + q2 + q3) - g*l_s3*m3*cos(q1 + q2 + q3) - 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) - 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3))) - qd3*(B3*r3**2 + kb3*km3/R3) + u3)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))
    
    # Änderung Kraftvektor
    #dx[9] = controller.fq
     
    
    # Zwischenspeichern der Beschleunigungen
    x[6], x[7], x[8] = dx[3], dx[4], dx[5]
    return dx

######## ***************************************  
##         REGLER   
##  
######## ***************************************  
def ctr_multi_ext(t,x,ctr,dx):
    
    """ Extendend Nonlinear System Model
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3]
        t:             time as int
        u_soll:        Solltrajektorie  [y_soll, phi_soll, yd_soll,phid_soll, ydd_soll, phidd_soll]  vector n = 6


        Returns
        --------
        u:       input control vektor [u1, u2, u3]     
                
    """


    u = [0,0,0]  
    ax_soll = [0,0,0,0,0,0]

    for i in range(6):
        ax_soll[i] = np.interp(t,ctr.t,ctr.ax[i,:])   # Interpolierung von u, damit die Funktion mit ODE-Solver aufgerufen wird kann

    q1, q2, q3, qd1, qd2, qd3  = x[0], x[1], x[2], x[3], x[4], x[5]
 
    # Transformation vom Gelenkraum in den Arbeitsraum
    X = transform_J_to_K(x)


    '''   ARBEITSRAUM    '''
    x_soll =   np.array(ax_soll[0:2])
    xd_soll =  np.array(ax_soll[2:4])
    xdd_soll = np.array(ax_soll[4:6])

    
    # controller 
    # Positionsregler für [y,Psi]
    ax1 =  xdd_soll - ctr.k1@([X[1,1],X[-1,1]]- xd_soll) -ctr.k0@([X[1,0],X[-1,0]]-x_soll)     
    ax = [0, ax1[0],0,0,0,ax1[1]] 

    # Kraftregler
    # Anteil der externen Kraft
    if X[0,0]>ctr.xw:
        fx = ctr.kf*(X[0,0]-ctr.xw)
        ctr.force = True        
    else: 
        fx = 0
        ctr.force = False
    
    ctr.fx = fx

    
    #ax+ = 
    f_tilde = ctr.kb*(X[0,1]-0) + ctr.kd*(X[0,0] - ctr.xw) + fx 

    F = np.array([f_tilde,0,0, 0,0,0])
    W = Ja(x)@M_inv(x)@Ja(x).T
    ax -= W@F
    af = np.array([ctr.f,0,0, 0,0,0])

    

    
    # Transfromation vom Arbeits in den Gelenksraum
    aq = transform_K_to_J(x,ax)

    '''   GELENKSRAUM    '''

    # Inverse Dynamik
    aq1, aq2, aq3 = aq[0], aq[1], aq[2]    
    
    u[0] = B1*qd1*r1**2 + 1.0*I1*aq1 + 1.0*I2*aq1 + 1.0*I2*aq2 + 1.0*I3*aq1 + 1.0*I3*aq2 + 1.0*I3*aq3 + 1.0*J1*aq1*r1**2 + 1.0*aq1*l1**2*m2 + 1.0*aq1*l1**2*m3 + 2.0*aq1*l1*l2*m3*cos(q2) + 2.0*aq1*l1*l_s2*m2*cos(q2) + 2.0*aq1*l1*l_s3*m3*cos(q2 + q3) + 1.0*aq1*l2**2*m3 + 2.0*aq1*l2*l_s3*m3*cos(q3) + 1.0*aq1*l_s1**2*m1 + 1.0*aq1*l_s2**2*m2 + 1.0*aq1*l_s3**2*m3 + 1.0*aq2*l1*l2*m3*cos(q2) + 1.0*aq2*l1*l_s2*m2*cos(q2) + 1.0*aq2*l1*l_s3*m3*cos(q2 + q3) + 1.0*aq2*l2**2*m3 + 2.0*aq2*l2*l_s3*m3*cos(q3) + 1.0*aq2*l_s2**2*m2 + 1.0*aq2*l_s3**2*m3 + 1.0*aq3*l1*l_s3*m3*cos(q2 + q3) + 1.0*aq3*l2*l_s3*m3*cos(q3) + 1.0*aq3*l_s3**2*m3 + 1.0*g*l1*m2*cos(q1) + 1.0*g*l1*m3*cos(q1) + 1.0*g*l2*m3*cos(q1 + q2) + 1.0*g*l_s1*m1*cos(q1) + 1.0*g*l_s2*m2*cos(q1 + q2) + 1.0*g*l_s3*m3*cos(q1 + q2 + q3) - 2.0*l1*l2*m3*qd1*qd2*sin(q2) - 1.0*l1*l2*m3*qd2**2*sin(q2) - 2.0*l1*l_s2*m2*qd1*qd2*sin(q2) - 1.0*l1*l_s2*m2*qd2**2*sin(q2) - 2.0*l1*l_s3*m3*qd1*qd2*sin(q2 + q3) - 2.0*l1*l_s3*m3*qd1*qd3*sin(q2 + q3) - 1.0*l1*l_s3*m3*qd2**2*sin(q2 + q3) - 2.0*l1*l_s3*m3*qd2*qd3*sin(q2 + q3) - 1.0*l1*l_s3*m3*qd3**2*sin(q2 + q3) - 2.0*l2*l_s3*m3*qd1*qd3*sin(q3) - 2.0*l2*l_s3*m3*qd2*qd3*sin(q3) - 1.0*l2*l_s3*m3*qd3**2*sin(q3) + 1.0*kb1*km1*qd1/R1
    u[1] = (R2*(aq1*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + aq2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + aq3*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3) + g*(l_s2*m2*cos(q1 + q2) + m3*(l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))) - 1.0*l2*l_s3*m3*qd3*(qd1 + qd2 + qd3)*sin(q3) + 1.0*qd1*(l1*qd1*(l2*m3*sin(q2) + l_s2*m2*sin(q2) + l_s3*m3*sin(q2 + q3)) - l2*l_s3*m3*qd3*sin(q3))) + qd2*(R2*(B2*r2**2 - 1.0*l2*l_s3*m3*qd3*sin(q3)) + kb2*km2))/R2
    u[2] = (R3*(aq1*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3) + aq2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3) + aq3*(I3 + J3*r3**2 + l_s3**2*m3) + g*l_s3*m3*cos(q1 + q2 + q3) + 1.0*l2*l_s3*m3*qd2*(qd1 + qd2)*sin(q3) + 1.0*l_s3*m3*qd1*(l2*qd2*sin(q3) + qd1*(l1*sin(q2 + q3) + l2*sin(q3)))) + qd3*(B3*R3*r3**2 + kb3*km3))/R3

    #u += Ja(x).T@af
    return u




######## ***************************************  
##         TRANSFORMATION    
##  
######## ***************************************  

def M_inv(x):
    
    q1, q2, q3 = x[0],x[1],x[2] 


    Minv =  np.array([ [ ((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)),                                                                                                                                                                     (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)),                                                                                                                  ((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))],
                      [ (-(I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) + (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)),                                                                                                                                                 ((I3 + J3*r3**2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)), (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))],
                      [((I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)), (-(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)),                      ((I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2)/((I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) - (I3 + J3*r3**2 + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3)**2 - (I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I1 + I2 + I3 + J1*r1**2 + l1**2*m2 + l1**2*m3 + 2*l1*l2*m3*cos(q2) + 2*l1*l_s2*m2*cos(q2) + 2*l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s1**2*m1 + l_s2**2*m2 + l_s3**2*m3) + 2*(I3 + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)*(I2 + I3 + l1*l2*m3*cos(q2) + l1*l_s2*m2*cos(q2) + l1*l_s3*m3*cos(q2 + q3) + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3) - (I3 + l1*l_s3*m3*cos(q2 + q3) + l2*l_s3*m3*cos(q3) + l_s3**2*m3)**2*(I2 + I3 + J2*r2**2 + l2**2*m3 + 2*l2*l_s3*m3*cos(q3) + l_s2**2*m2 + l_s3**2*m3))]])
    return Minv


def Ja(x):
    """ Transformation from the Joinspace velocity to kartesian verlocity
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3]        
                
        Returns
        --------
        (ax:       Kartesian velocitys [x_dot, y_dot, z_dot, omega_X, omega_y, omega_z]  )
        Ja:       analytische Jacobimatrix    
                
    """
    
    q1, q2, q3 = x[0],x[1],x[2] 
  


    Ja = np.array([[-l1*sin(q1) - l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3), -l2*sin(q1 + q2) - l_s3*sin(q1 + q2 + q3), -l_s3*sin(q1 + q2 + q3)],
                    [ l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3),  l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3),  l_s3*cos(q1 + q2 + q3)],
                    [                                                     0,                                         0,                       0],
                    [                                                     0,                                         0,                       0],
                    [                                                     0,                                         0,                       0],
                    [                                                     1,                                         1,                       1]])
    
   

    return Ja


def Ja_inv(x):

    """ Pseudoinverse of the analytic jacobian
        Params
         --------0
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3]           

        Returns
        --------
        qd:       Join velocitys [q1_dot, q2_dot, q2_dot]     
                
    """

    q1,q2,q3  = x[0],x[1],x[2]

    lamda = 0.01  # Dämpfung nahe von Singularitäten

    # lamda stellt einen Zusätzlichen Freiheitsgrad dar mit welchem die Anforderungen maximiert werden können [S.42ff, Skript Automatisierungs-und Regelungstechnik WS2021/22 TU-Wien]  --> zB Dämpfung der Geschwindikgeit im Gelenksraum bei singularitäten  
    
    Ja_t = np.array([[ (l1*l2**2*lamda**2*(sin(q1 + 2*q2) + sin(3*q1 + 2*q2))/4 - l1*l2**2*lamda**2*sin(q1)*cos(q1 + q2)**2 + l1*l2**2*(sin(q1 + 2*q2) + sin(3*q1 + 2*q2))/4 - l1*l2**2*sin(q1)*cos(q1 + q2)**2 - 2*l1*l2*l_s3*lamda**2*sin(q1)*cos(q1 + q2)*cos(q1 + q2 + q3) + l1*l2*l_s3*lamda**2*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) + l1*l2*l_s3*lamda**2*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + l1*l_s3**2*lamda**2*(sin(q1 + 2*q2 + 2*q3) + sin(3*q1 + 2*q2 + 2*q3))/2 - 2*l1*l_s3**2*lamda**2*sin(q1)*cos(q1 + q2 + q3)**2 - l1*lamda**4*sin(q1) - 2*l1*lamda**2*sin(q1) + l2*l_s3**2*lamda**2*(sin(q1 + q2 + 2*q3) + sin(3*q1 + 3*q2 + 2*q3))/4 - l2*l_s3**2*lamda**2*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - l2*lamda**4*sin(q1 + q2) - l2*lamda**2*sin(q1 + q2) - l_s3*lamda**4*sin(q1 + q2 + q3))/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamdal_s3*(-(l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1))*sin(q1 + q2 + q3) - (l2*sin(q1 + q2) + l_s3*sin(q1 + q2 + q3))*(-(l_s3**2 + lamda**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)**2) - ((l_s3**2 + lamda**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1) - (l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1))*(l1*sin(q1) + l2*sin(q1 + q2) + l_s3*sin(q1 + q2 + q3)))/(-(l_s3**2 + lamda**2 + 1)*(l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l_s3**2 + lamda**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1)**2 + (l2*l_s3*cos(q3) + l_s3**2 + 1)**2*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) - 2*(l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)**2*(l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1)), (-l1**2*l2*(sin(q1 - q2) + sin(3*q1 + q2))/4 + l1**2*l2*sin(q1 + q2)*cos(q1)**2 + l1**2*l_s3*lamda**2*(-sin(-q1 + q2 + q3) + sin(3*q1 + q2 + q3))/4 - l1**2*l_s3*lamda**2*sin(q1 + q2 + q3)*cos(q1)**2 + l1*l2*l_s3*lamda**2*sin(q1)*cos(q1 + q2)*cos(q1 + q2 + q3) + l1*l2*l_s3*lamda**2*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3*lamda**2*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) - l1*l_s3**2*lamda**2*(sin(q1 + 2*q2 + 2*q3) + sin(3*q1 + 2*q2 + 2*q3))/4 + l1*l_s3**2*lamda**2*sin(q1)*cos(q1 + q2 + q3)**2 + l1*lamda**2*sin(q1) + l2**2*l_s3*lamda**2*(sin(q1 + q2 - q3) + sin(3*q1 + 3*q2 + q3))/2 - 2*l2**2*l_s3*lamda**2*sin(q1 + q2 + q3)*cos(q1 + q2)**2 - l2*l_s3**2*lamda**2*(sin(q1 + q2 + 2*q3) + sin(3*q1 + 3*q2 + 2*q3))/2 + 2*l2*l_s3**2*lamda**2*sin(q1 + q2)*cos(q1 + q2 + q3)**2 + 2*l2*lamda**2*sin(q1 + q2) - l_s3*lamda**4*sin(q1 + q2 + q3))/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamda**4)],
                        [(-l1*l2**2*lamda**2*(cos(q1 + 2*q2) - cos(3*q1 + 2*q2))/4 + l1*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1) - l1*l2**2*(cos(q1 + 2*q2) - cos(3*q1 + 2*q2))/4 + l1*l2**2*sin(q1 + q2)**2*cos(q1) - l1*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3) - l1*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2) + 2*l1*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1) - l1*l_s3**2*lamda**2*(cos(q1 + 2*q2 + 2*q3) - cos(3*q1 + 2*q2 + 2*q3))/2 + 2*l1*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1) + l1*lamda**4*cos(q1) + 2*l1*lamda**2*cos(q1) - l2*l_s3**2*lamda**2*(cos(q1 + q2 + 2*q3) - cos(3*q1 + 3*q2 + 2*q3))/4 + l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2) + l2*lamda**4*cos(q1 + q2) + l2*lamda**2*cos(q1 + q2) + l_s3*lamda**4*cos(q1 + q2 + q3))/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamdal_s3*(-(l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1))*cos(q1 + q2 + q3) + (l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3))*(-(l_s3**2 + lamda**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)**2) + ((l_s3**2 + lamda**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1) - (l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1))*(l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3)))/(-(l_s3**2 + lamda**2 + 1)*(l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1)*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) + (l_s3**2 + lamda**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1)**2 + (l2*l_s3*cos(q3) + l_s3**2 + 1)**2*(l1**2 + 2*l1*l2*cos(q2) + 2*l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1) - 2*(l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)*(l1*l2*cos(q2) + l1*l_s3*cos(q2 + q3) + l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + 1) + (l1*l_s3*cos(q2 + q3) + l2*l_s3*cos(q3) + l_s3**2 + 1)**2*(l2**2 + 2*l2*l_s3*cos(q3) + l_s3**2 + lamda**2 + 1)),   (l1**2*l2*(cos(q1 - q2) - cos(3*q1 + q2))/4 - l1**2*l2*sin(q1)**2*cos(q1 + q2) - l1**2*l_s3*lamda**2*(cos(-q1 + q2 + q3) - cos(3*q1 + q2 + q3))/4 + l1**2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2 + q3) + 2*l1*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3) - l1*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2) - l1*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1) + l1*l_s3**2*lamda**2*(cos(q1 + 2*q2 + 2*q3) - cos(3*q1 + 2*q2 + 2*q3))/4 - l1*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1) - l1*lamda**2*cos(q1) - l2**2*l_s3*lamda**2*(cos(q1 + q2 - q3) - cos(3*q1 + 3*q2 + q3))/2 + 2*l2**2*l_s3*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3) + l2*l_s3**2*lamda**2*(cos(q1 + q2 + 2*q3) - cos(3*q1 + 3*q2 + 2*q3))/2 - 2*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2) - 2*l2*lamda**2*cos(q1 + q2) + l_s3*lamda**4*cos(q1 + q2 + q3))/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamda**4)],



                        [                                                                                                                                                                                                                                    (l1*l2**2*l_s3*sin(q1)*sin(q1 + q2)*cos(q1 + q2)*cos(q1 + q2 + q3) - l1*l2**2*l_s3*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)**2 - l1*l2**2*l_s3*sin(q1 + q2)**2*cos(q1)*cos(q1 + q2 + q3) + l1*l2**2*l_s3*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) - l1*l2*lamda**2*sin(q1)*sin(q1 + q2) - l1*l2*lamda**2*cos(q1)*cos(q1 + q2) - 2*l1*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3) - 2*l1*l_s3*lamda**2*cos(q1)*cos(q1 + q2 + q3) - l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3) - l2*l_s3*lamda**2*cos(q1 + q2)*cos(q1 + q2 + q3) + lamda**4)/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamda**4), (-l1**2*l2*l_s3*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) + l1**2*l2*l_s3*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) + l1**2*l2*l_s3*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) - l1**2*l2*l_s3*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 + l1**2*lamda**2*sin(q1)**2 + l1**2*lamda**2*cos(q1)**2 - l1*l2**2*l_s3*sin(q1)*sin(q1 + q2)*cos(q1 + q2)*cos(q1 + q2 + q3) + l1*l2**2*l_s3*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)**2 + l1*l2**2*l_s3*sin(q1 + q2)**2*cos(q1)*cos(q1 + q2 + q3) - l1*l2**2*l_s3*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + l1*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3) + l1*l_s3*lamda**2*cos(q1)*cos(q1 + q2 + q3) - l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3) - l2*l_s3*lamda**2*cos(q1 + q2)*cos(q1 + q2 + q3) + lamda**4)/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamda**4),                                                                                                                                                                                                                                                              (2*l1**2*l2**2*(1 - cos(q1)**2)**2*cos(q2)**2 - 2*l1**2*l2**2*cos(q1)**4*cos(q2)**2 + 4*l1**2*l2**2*cos(q1)**2*cos(q2)**2 - 3*l1**2*l2**2*cos(q2)**2 + l1**2*l2**2 - l1**2*l2*l_s3*sin(q1)*sin(q2)*sin(q3)*sin(q1 + q2) + 2*l1**2*l2*l_s3*sin(q1)*sin(q2)*cos(q1)*cos(q2)*cos(q3) - 2*l1**2*l2*l_s3*sin(q1)*sin(q2)*cos(q2)*cos(q1 + q3) - l1**2*l2*l_s3*sin(q1)*sin(q1 + q3)*cos(q2)**2 + l1**2*l2*l_s3*sin(q1)*sin(q1 + q3) + l1**2*l2*l_s3*sin(q2)*sin(q2 + q3)*cos(q1)**2 + l1**2*lamda**2 + 2*l1*l2*lamda**2*cos(q2) + l1*l_s3*lamda**2*cos(q2 + q3) + 2*l2**2*lamda**2 + 2*l2*l_s3*lamda**2*cos(q3) + lamda**4)/(-l1**2*l2**2*lamda**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*lamda**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*lamda**2*sin(q1 + q2)**2*cos(q1)**2 - l1**2*l2**2*(cos(2*q2) - cos(4*q1 + 2*q2))/4 + l1**2*l2**2*sin(q1)**2*cos(q1 + q2)**2 + l1**2*l2**2*sin(q1 + q2)**2*cos(q1)**2 + 2*l1**2*l2*l_s3*lamda**2*sin(q1)**2*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1)*cos(q1 + q2 + q3) - 2*l1**2*l2*l_s3*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2) + 2*l1**2*l2*l_s3*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)**2 - l1**2*l_s3**2*lamda**2*(cos(2*q2 + 2*q3) - cos(4*q1 + 2*q2 + 2*q3))/2 + 2*l1**2*l_s3**2*lamda**2*sin(q1)**2*cos(q1 + q2 + q3)**2 + 2*l1**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)**2 + l1**2*lamda**4*sin(q1)**2 + l1**2*lamda**4*cos(q1)**2 + 2*l1**2*lamda**2*sin(q1)**2 + 2*l1**2*lamda**2*cos(q1)**2 + 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2)*cos(q1 + q2 + q3)**2 - 2*l1*l2*l_s3**2*lamda**2*sin(q1)*sin(q1 + q2 + q3)*cos(q1 + q2)*cos(q1 + q2 + q3) - 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2)*sin(q1 + q2 + q3)*cos(q1)*cos(q1 + q2 + q3) + 2*l1*l2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**4*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**4*cos(q1)*cos(q1 + q2) + 2*l1*l2*lamda**2*sin(q1)*sin(q1 + q2) + 2*l1*l2*lamda**2*cos(q1)*cos(q1 + q2) + 2*l1*l_s3*lamda**4*sin(q1)*sin(q1 + q2 + q3) + 2*l1*l_s3*lamda**4*cos(q1)*cos(q1 + q2 + q3) - l2**2*l_s3**2*lamda**2*(cos(2*q3) - cos(4*q1 + 4*q2 + 2*q3))/2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2)**2*cos(q1 + q2 + q3)**2 + 2*l2**2*l_s3**2*lamda**2*sin(q1 + q2 + q3)**2*cos(q1 + q2)**2 + 2*l2**2*lamda**4*sin(q1 + q2)**2 + 2*l2**2*lamda**4*cos(q1 + q2)**2 + 2*l2**2*lamda**2*sin(q1 + q2)**2 + 2*l2**2*lamda**2*cos(q1 + q2)**2 + 4*l2*l_s3*lamda**4*sin(q1 + q2)*sin(q1 + q2 + q3) + 4*l2*l_s3*lamda**4*cos(q1 + q2)*cos(q1 + q2 + q3) + 3*l_s3**2*lamda**4*sin(q1 + q2 + q3)**2 + 3*l_s3**2*lamda**4*cos(q1 + q2 + q3)**2 + lamda**6 + 3*lamda**4)]])

    return Ja_t.T


def Ja_diff(x):
    """ Time derivative of the jacobian
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3] 
        
        
        
        Returns
        --------
        Ja_diff:       Time derivative Jacobian    
                
    """

    q1,q2,q3,qd1,qd2,qd3  = x[0],x[1],x[2],x[3],x[4],x[5]
   

    Ja_diff = np.array([[-l1*qd1*cos(q1) - l2*qd1*cos(q1 + q2) - l2*qd2*cos(q1 + q2) - l_s3*qd1*cos(q1 + q2 + q3) - l_s3*qd2*cos(q1 + q2 + q3) - l_s3*cos(q1 + q2 + q3), -l2*qd1*cos(q1 + q2) - l2*qd2*cos(q1 + q2) - l_s3*qd1*cos(q1 + q2 + q3) - l_s3*qd2*cos(q1 + q2 + q3) - l_s3*cos(q1 + q2 + q3), -l_s3*(qd1 + qd2 + 1)*cos(q1 + q2 + q3)],
                          [-l1*qd1*sin(q1) - l2*qd1*sin(q1 + q2) - l2*qd2*sin(q1 + q2) - l_s3*qd1*sin(q1 + q2 + q3) - l_s3*qd2*sin(q1 + q2 + q3) - l_s3*sin(q1 + q2 + q3), -l2*qd1*sin(q1 + q2) - l2*qd2*sin(q1 + q2) - l_s3*qd1*sin(q1 + q2 + q3) - l_s3*qd2*sin(q1 + q2 + q3) - l_s3*sin(q1 + q2 + q3), -l_s3*(qd1 + qd2 + 1)*sin(q1 + q2 + q3)],
                          [                                                                                                                                             0,                                                                                                                             0,                                       0],
                          [                                                                                                                                             0,                                                                                                                             0,                                       0],
                          [                                                                                                                                             0,                                                                                                                             0,                                       0],
                          [                                                                                                                                             0,                                                                                                                             0,                                       0]])

    

    return Ja_diff


def transform_K_to_J(x,ax):
    """ Transformation from the kartesian into the join space 
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3]    
        ax:            Tilde [x,y,z, phi, theta, psi] 


        Returns
        --------
        daq:       input control vektor [aq1, aq2, aq2]     
                
    """

    qx = np.array(x[3:6])   
    
    ax = np.array(ax)        

    T = (ax-Ja_diff(x)@qx)  
    
    aq = Ja_inv(x)@T.T


    return aq


def transform_J_to_K(x):
    """ Transfrom from the joint space to the kartesian space
        Params
         --------
        x:             steady states as [q1,q2,q3,qd1,qd2,qd3, qdd1, qdd2, qdd3, f]         
     
        Returns
        --------
        [qx. dqx, ddqx]:          qx = [x,y,z,phi,theta,psi].T    mit psi = 0 und psi_d = phi_d
                
    """
    
    qx = np.zeros((6))
    q1,q2,q3 = x[0], x[1],  x[2]     
    qd = np.array(x[3:6])
    qdd = np.array(x[6:9])
    

    T0e = np.array([l1*cos(q1) + l2*cos(q1 + q2) + l_s3*cos(q1 + q2 + q3),
                    l1*sin(q1) + l2*sin(q1 + q2) + l_s3*sin(q1 + q2 + q3)])

    qx[0] = T0e[0]                      # x    
    qx[1] = T0e[1]                      # y
    qx[3] = 0                           # Psi
    qx[4] = 0                           # Theta
    qx[5] = (q1+q2+q3)    #np.arccos(T0e[0,1])           # Phi
    # Kürzen der Überschüssigen vielfachen
    while abs(qx[5]) > 2*np.pi:
        if qx[5] > 0:
            qx[5] -= (2*np.pi)
        else: qx[5] += (2*np.pi)
    

    v     = Ja(x)@qd                         # Geschwindigkeit  
    a     = Ja(x)@qdd + Ja_diff(x)@qd        # Beschleunigung

    
    return np.vstack((qx,v,a)).T

# %%
